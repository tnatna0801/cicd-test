# Workflow의 이름을 지정합니다.
name: Cicd-Test - CI/CD

on:
  push:
  # main branch에 push(merge)될 경우 실행됩니다.
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
  # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # JDK를 11 버전으로 셋팅합니다.
    - name: Set up JDK 17 
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-

    - name: Gradle 권한 부여
      run: chmod +x gradlew

    - name: Gradle로 빌드 실행
      run: ./gradlew clean build


    # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
    - name: zip file 생성
      run: |
        mkdir deploy
        cp ./docker-compose.blue.yml ./deploy/
        cp ./docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp Dockerfile ./deploy/
        cp ./*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./cicd-test-build.zip ./deploy


    # AWS에 연결해줍니다.
    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # S3에 프로젝트를 업로드 합니다.
    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./cicd-build.zip s3://cicd-test-sample-bucket

    # CodeDelploy에 배포를 요청합니다.
    - name: Code Deploy 배포 요청
      run: aws deploy create-deployment --application-name cicd-test-application
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name cicd-test
        --s3-location bucket=cicd-test-sample-bucket,bundleType=zip,key=cicd-test-build.zip
